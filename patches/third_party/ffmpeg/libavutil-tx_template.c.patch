diff --git a/libavutil/tx_template.c b/libavutil/tx_template.c
index 8dc3d2519c13abec090b374fa5ed0f11f7153849..2fbcd471000e5b6c7593c0e1d860d79f8a27046a 100644
--- a/libavutil/tx_template.c
+++ b/libavutil/tx_template.c
@@ -27,6 +27,29 @@
 #define TABLE_DEF(name, size) \
     DECLARE_ALIGNED(32, TXSample, TX_TAB(ff_tx_tab_ ##name))[size]
 
+#ifdef _WIN32
+
+#include <malloc.h>
+
+// Declares aligned ff_tx_tab_* pointer.
+#define TABLE_DEF_PTR(name, size) \
+  DECLARE_ALIGNED(32, TXSample*, TX_TAB(ff_tx_tab_##name))
+
+// Allocates aligned memory for ff_tx_tab_* variable.
+#define ALLOCATE_FF_TX_TABLE(len)                              \
+  if (!TX_TAB(ff_tx_tab_##len)) {                              \
+    TX_TAB(ff_tx_tab_##len) =                                  \
+        _aligned_malloc((len / 4 + 1) * sizeof(TXSample), 32); \
+  }
+
+#else
+
+// Use static arrays on non-Windows targets as usual.
+#define TABLE_DEF_PTR(name, size) TABLE_DEF(name, size)
+#define ALLOCATE_FF_TX_TABLE(len)
+
+#endif
+
 #define SR_POW2_TABLES \
     SR_TABLE(8)        \
     SR_TABLE(16)       \
@@ -49,7 +72,7 @@
     SR_TABLE(2097152)   \
 
 #define SR_TABLE(len) \
-    TABLE_DEF(len, len/4 + 1);
+    TABLE_DEF_PTR(len, len/4 + 1);
 /* Power of two tables */
 SR_POW2_TABLES
 #undef SR_TABLE
@@ -68,6 +91,7 @@ typedef struct FFTabInitData {
 static av_cold void TX_TAB(ff_tx_init_tab_ ##len)(void)            \
 {                                                                  \
     double freq = 2*M_PI/len;                                      \
+    ALLOCATE_FF_TX_TABLE(len);                                     \
     TXSample *tab = TX_TAB(ff_tx_tab_ ##len);                      \
                                                                    \
     for (int i = 0; i < len/4; i++)                                \
